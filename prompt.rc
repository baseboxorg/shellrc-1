# vim: set ts=2 sts=2 sw=2 expandtab
setopt prompt_subst
PS1_END="
%{$red%}%(?..!%?! )%{$reset%}%(!.#.\$) "
PS1_HOST='%m:'
RPROMPT_HOST='%y@%m'
if [ -z "$SSH_TTY" ]; then
  PS1_HOST=
  RPROMPT_HOST=%y
fi


autoload -Uz vcs_info
use_vcs_info=
if vcs_info >/dev/null 2>&1; then
  use_vcs_info=y
fi

if [ "x$use_vcs_info" = "xy" ]; then
  # zsh:
  # %F{2} red
  # %F{2} green
  # %F{3} yellow
  # %F{4} darkblue
  # %F{5} magenta

# zstyle ':vcs_info:*' enable svn git
  zstyle ':vcs_info:*' enable     git
  zstyle ':vcs_info:*' actionformats \
    '%F{5}(%f%s%F{5})%F{3}-%F{5}[%F{2}%b%F{3}|%F{1}%a%F{5}]%f '
  zstyle ':vcs_info:*' formats       \
    '(%s) %b'
  zstyle ':vcs_info:(sv[nk]|bzr):*' branchformat '%b%F{1}:%F{3}%r'
  precmd_hook () {
    if [ -n "$NFS_MOUNTED" ]; then
      case $PWD in
        *$NFS_MOUNTED*)
          vcs_info_msg_0_=' (nfs mounted)'
          ;;
        *)
          vcs_info
          ;;
      esac
    else
      vcs_info
    fi
  }
  if [ -n "$SSH_TTY" ]; then
    PS1='%F{2}$PS1_HOST%~%F{3}${vcs_info_msg_0_} %(1j.(%j).)%f$PS1_END'
  else
    PS1='%F{4}$PS1_HOST%~%F{3}${vcs_info_msg_0_} %(1j.(%j).)%f$PS1_END'
  fi
  RPROMPT="%F{4}\$RPROMPT_HOST%f"
else
  green="[32m"
  yellow="[33m"
  reset="[0m"
  blue="[00;38;5;33m"

  git_prompt=$HOME/src/git/contrib/completion/git-prompt.sh
  if [ -f $git_prompt ]; then
    source $git_prompt
    GIT_PS1_SHOWDIRTYSTATE=true

    precmd_hook() {
      GIT_STATUS=`__git_ps1 ' (%s)'`
    }
    PS1="%{$blue%}\$PS1_HOST%~%{$yellow%}\$GIT_STATUS %(1j.(%j).)%{$reset%}\$PS1_END"
  else
    PS1="%{$blue%}\$PS1_HOST%~ \$PS1_END"
  fi

  RPROMPT="%{$blue%}\$RPROMPT_HOST%{$reset%}"
fi

case $TERM_NAME in
  any) RPROMPT=;;
  bigterm) RPROMPT=;;
esac

# When a line is killed, put it in the history anyway in case we want to
# return to it
TRAPINT() {
       # Store the current buffer in the history.
       zle &&
       [[ $HISTNO -eq $HISTCMD ]] && # only if we're not back in the history
       print -s -r -- $BUFFER

       # Return the default exit code so zsh aborts the current command.
       return $1
}

mux_title_curr_dir() {
  test -z "$NO_DYNAMIC_TITLE" && mux title ${(D)PWD#$HOME/}
}

mux_title() {
  test -z "$NO_DYNAMIC_TITLE" && mux title "'$*'"
}

test -n "$SSH_TTY" &&
chpwd() {
  case "$TERM_NAME" in
    "");;
    rtfm) ;;
    #*) screen -X title ${PWD##*/} ;;
    *) mux_title_curr_dir ;;
  esac
  test -n "$SHM_DIR" && echo $PWD > /dev/shm/$$.cwd
}

precmd() {
  precmd_hook
  mux_title_curr_dir
}

preexec() {
  typed_cmd=$1
  case "$TERM_NAME" in
    "");;
    rtfm) mux_title "${typed_cmd#man }" ;;
    *) mux_title "${typed_cmd%% *}" ;;
  esac
}

mux_title_curr_dir
